name: Auto CrossPost - Monorepo

# This workflow handles multiple blogs in a monorepo structure
# Each app/package can have its own blog and configuration

on:
  push:
    branches: [main]
    paths: 
      - 'apps/*/blog/**/*.md'
      - 'packages/*/content/**/*.md'
      - 'sites/*/posts/**/*.md'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changed blog directories
        id: set-matrix
        run: |
          # Get all changed markdown files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- '*.md' '**/*.md')
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No markdown files changed"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract unique directories that contain blogs
          BLOG_DIRS=""
          
          echo "$CHANGED_FILES" | while read file; do
            # Check different monorepo patterns
            case "$file" in
              apps/*/blog/*|apps/*/content/*|apps/*/posts/*)
                DIR=$(echo "$file" | cut -d'/' -f1-2)
                echo "$DIR"
                ;;
              packages/*/blog/*|packages/*/content/*|packages/*/posts/*)
                DIR=$(echo "$file" | cut -d'/' -f1-2)
                echo "$DIR"
                ;;
              sites/*/blog/*|sites/*/content/*|sites/*/posts/*)
                DIR=$(echo "$file" | cut -d'/' -f1-2)
                echo "$DIR"
                ;;
            esac
          done | sort | uniq > /tmp/blog_dirs.txt
          
          # Build matrix
          MATRIX_ITEMS=""
          
          while read dir; do
            if [ -n "$dir" ]; then
              # Extract app name
              APP_NAME=$(echo "$dir" | cut -d'/' -f2)
              
              # Check for config files
              CONFIG_FILE=""
              for config in "$dir/crosspost.config.json" "$dir/.crosspostrc.json" "crosspost.config.json"; do
                if [ -f "$config" ]; then
                  CONFIG_FILE="$config"
                  break
                fi
              done
              
              if [ -n "$CONFIG_FILE" ]; then
                MATRIX_ITEMS="$MATRIX_ITEMS{\"directory\":\"$dir\",\"app\":\"$APP_NAME\",\"config\":\"$CONFIG_FILE\"},"
              else
                MATRIX_ITEMS="$MATRIX_ITEMS{\"directory\":\"$dir\",\"app\":\"$APP_NAME\",\"config\":\"crosspost.config.json\"},"
              fi
            fi
          done < /tmp/blog_dirs.txt
          
          # Remove trailing comma and build final matrix
          MATRIX_ITEMS=$(echo "$MATRIX_ITEMS" | sed 's/,$//')
          
          if [ -n "$MATRIX_ITEMS" ]; then
            echo "matrix={\"include\":[$MATRIX_ITEMS]}" >> $GITHUB_OUTPUT
            echo "üìã Detected blog changes in:"
            cat /tmp/blog_dirs.txt
          else
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "üì≠ No blog directories with configs found"
          fi

  crosspost:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '{"include":[]}' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false  # Continue with other apps even if one fails
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Auto-CrossPost
        run: npm install -g auto-crosspost
      
      - name: Setup configuration for ${{ matrix.app }}
        env:
          DEVTO_API_KEY: ${{ secrets.DEVTO_API_KEY }}
          HASHNODE_ACCESS_TOKEN: ${{ secrets.HASHNODE_ACCESS_TOKEN }}
          HASHNODE_PUBLICATION_ID: ${{ secrets.HASHNODE_PUBLICATION_ID }}
          # App-specific secrets (optional)
          DEVTO_API_KEY_APP: ${{ secrets[format('DEVTO_API_KEY_{0}', matrix.app)] }}
          HASHNODE_TOKEN_APP: ${{ secrets[format('HASHNODE_ACCESS_TOKEN_{0}', matrix.app)] }}
        run: |
          echo "üîß Setting up configuration for ${{ matrix.app }}"
          
          # Use app-specific secrets if available, otherwise fall back to global
          FINAL_DEVTO_KEY="${DEVTO_API_KEY_APP:-$DEVTO_API_KEY}"
          FINAL_HASHNODE_TOKEN="${HASHNODE_TOKEN_APP:-$HASHNODE_ACCESS_TOKEN}"
          
          if [ ! -f "${{ matrix.config }}" ]; then
            echo "üìù Creating default configuration..."
            cat > "${{ matrix.config }}" << EOF
          {
            "platforms": {
              "devto": {
                "apiKey": "$FINAL_DEVTO_KEY"
              },
              "hashnode": {
                "accessToken": "$FINAL_HASHNODE_TOKEN",
                "publicationId": "$HASHNODE_PUBLICATION_ID"
              }
            },
            "defaults": {
              "publishStatus": "published"
            },
            "logging": {
              "level": "info"
            }
          }
          EOF
          else
            echo "üìã Using existing configuration: ${{ matrix.config }}"
            # Replace placeholders in existing config
            sed -i "s/\${DEVTO_API_KEY}/$FINAL_DEVTO_KEY/g" "${{ matrix.config }}"
            sed -i "s/\${HASHNODE_ACCESS_TOKEN}/$FINAL_HASHNODE_TOKEN/g" "${{ matrix.config }}"
            sed -i "s/\${HASHNODE_PUBLICATION_ID}/$HASHNODE_PUBLICATION_ID/g" "${{ matrix.config }}"
          fi
      
      - name: Get changed files for ${{ matrix.app }}
        id: changed-files
        run: |
          # Get files changed in this specific directory
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- '${{ matrix.directory }}/*.md' '${{ matrix.directory }}/**/*.md')
          
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "üìã Changed files in ${{ matrix.app }}:"
            echo "$CHANGED_FILES" | while read file; do
              echo "  - $file"
            done
          else
            echo "üì≠ No files changed in ${{ matrix.directory }}"
          fi
      
      - name: Cross-post files for ${{ matrix.app }}
        if: steps.changed-files.outputs.files != ''
        working-directory: ${{ matrix.directory }}
        run: |
          echo "üöÄ Cross-posting for ${{ matrix.app }}..."
          
          # Process each changed file
          echo "${{ steps.changed-files.outputs.files }}" | while read file; do
            # Remove directory prefix to get relative path
            RELATIVE_FILE=$(echo "$file" | sed 's|^${{ matrix.directory }}/||')
            
            if [ -f "$RELATIVE_FILE" ]; then
              echo "üìù Cross-posting: $RELATIVE_FILE"
              
              if crosspost post "$RELATIVE_FILE" --config "${{ matrix.config }}"; then
                echo "‚úÖ Successfully posted: $RELATIVE_FILE"
              else
                echo "‚ùå Failed to post: $RELATIVE_FILE"
                exit 1
              fi
              
              # Rate limiting delay
              sleep 10
            else
              echo "‚ö†Ô∏è File not found: $RELATIVE_FILE"
            fi
          done
      
      - name: Summary for ${{ matrix.app }}
        if: always()
        run: |
          echo "üìä Summary for ${{ matrix.app }}"
          echo "==============================="
          echo "Directory: ${{ matrix.directory }}"
          echo "Config: ${{ matrix.config }}"
          echo "Status: ${{ job.status }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ All posts for ${{ matrix.app }} cross-posted successfully!"
          else
            echo "üí• Some posts for ${{ matrix.app }} failed. Check logs above."
          fi

  final-summary:
    needs: [detect-changes, crosspost]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Overall Summary
        run: |
          echo "üìä Monorepo Cross-posting Summary"
          echo "================================"
          echo "Detection Status: ${{ needs.detect-changes.result }}"
          echo "Cross-posting Status: ${{ needs.crosspost.result }}"
          
          if [ "${{ needs.crosspost.result }}" = "success" ]; then
            echo "üéâ All apps processed successfully!"
          elif [ "${{ needs.crosspost.result }}" = "failure" ]; then
            echo "üí• Some apps failed. Check individual job logs."
          else
            echo "üì≠ No changes detected or jobs skipped."
          fi
